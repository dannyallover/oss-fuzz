syntax = "proto2";

package asn1_proto;

message PDU {
  required Identifier id = 1;
  required Length len = 2;
  required Value val = 3;
}

message Identifier {
  required Class id_class = 2;
  required Encoding encoding = 1;
  required Tag tag = 3;
}

message Tag {
  optional uint32 high_tag = 1;
  // |low_tag| is the default since we know that most of the 
  // existing ASN1 tags are going to be encoded with one byte.
  required UInt8 low_tag = 2;
}

enum UInt8 {
  VAL1 = 1;
  VAL2 = 2;
  VAL3 = 3;
  VAL4 = 4;
  VAL5 = 5;
  VAL6 = 6;
  VAL7 = 7;
  VAL8 = 8;
  VAL9 = 9;
  VAL10 = 10;
  VAL11 = 11;
  VAL12 = 12;
  VAL13 = 13;
  VAL14 = 14;
  VAL15 = 15;
  VAL16 = 16;
  VAL17 = 17;
  VAL18 = 18;
  VAL19 = 19;
  VAL20 = 20;
  VAL21 = 21;
  VAL22 = 22;
  VAL23 = 23;
  VAL24 = 24;
  VAL25 = 25;
  VAL26 = 26;
  VAL27 = 27;
  VAL28 = 28;
  VAL29 = 29;
  VAL30 = 30;
  VAL31 = 31;
  VAL32 = 32;
  VAL33 = 33;
  VAL34 = 34;
  VAL35 = 35;
  VAL36 = 36;
  VAL37 = 37;
  VAL38 = 38;
  VAL39 = 39;
  VAL40 = 40;
  VAL41 = 41;
  VAL42 = 42;
  VAL43 = 43;
  VAL44 = 44;
  VAL45 = 45;
  VAL46 = 46;
  VAL47 = 47;
  VAL48 = 48;
  VAL49 = 49;
  VAL50 = 50;
  VAL51 = 51;
  VAL52 = 52;
  VAL53 = 53;
  VAL54 = 54;
  VAL55 = 55;
  VAL56 = 56;
  VAL57 = 57;
  VAL58 = 58;
  VAL59 = 59;
  VAL60 = 60;
  VAL61 = 61;
  VAL62 = 62;
  VAL63 = 63;
  VAL64 = 64;
  VAL65 = 65;
  VAL66 = 66;
  VAL67 = 67;
  VAL68 = 68;
  VAL69 = 69;
  VAL70 = 70;
  VAL71 = 71;
  VAL72 = 72;
  VAL73 = 73;
  VAL74 = 74;
  VAL75 = 75;
  VAL76 = 76;
  VAL77 = 77;
  VAL78 = 78;
  VAL79 = 79;
  VAL80 = 80;
  VAL81 = 81;
  VAL82 = 82;
  VAL83 = 83;
  VAL84 = 84;
  VAL85 = 85;
  VAL86 = 86;
  VAL87 = 87;
  VAL88 = 88;
  VAL89 = 89;
  VAL90 = 90;
  VAL91 = 91;
  VAL92 = 92;
  VAL93 = 93;
  VAL94 = 94;
  VAL95 = 95;
  VAL96 = 96;
  VAL97 = 97;
  VAL98 = 98;
  VAL99 = 99;
  VAL100 = 100;
  VAL101 = 101;
  VAL102 = 102;
  VAL103 = 103;
  VAL104 = 104;
  VAL105 = 105;
  VAL106 = 106;
  VAL107 = 107;
  VAL108 = 108;
  VAL109 = 109;
  VAL110 = 110;
  VAL111 = 111;
  VAL112 = 112;
  VAL113 = 113;
  VAL114 = 114;
  VAL115 = 115;
  VAL116 = 116;
  VAL117 = 117;
  VAL118 = 118;
  VAL119 = 119;
  VAL120 = 120;
  VAL121 = 121;
  VAL122 = 122;
  VAL123 = 123;
  VAL124 = 124;
  VAL125 = 125;
  VAL126 = 126;
  VAL127 = 127;
  VAL128 = 128;
  VAL129 = 129;
  VAL130 = 130;
  VAL131 = 131;
  VAL132 = 132;
  VAL133 = 133;
  VAL134 = 134;
  VAL135 = 135;
  VAL136 = 136;
  VAL137 = 137;
  VAL138 = 138;
  VAL139 = 139;
  VAL140 = 140;
  VAL141 = 141;
  VAL142 = 142;
  VAL143 = 143;
  VAL144 = 144;
  VAL145 = 145;
  VAL146 = 146;
  VAL147 = 147;
  VAL148 = 148;
  VAL149 = 149;
  VAL150 = 150;
  VAL151 = 151;
  VAL152 = 152;
  VAL153 = 153;
  VAL154 = 154;
  VAL155 = 155;
  VAL156 = 156;
  VAL157 = 157;
  VAL158 = 158;
  VAL159 = 159;
  VAL160 = 160;
  VAL161 = 161;
  VAL162 = 162;
  VAL163 = 163;
  VAL164 = 164;
  VAL165 = 165;
  VAL166 = 166;
  VAL167 = 167;
  VAL168 = 168;
  VAL169 = 169;
  VAL170 = 170;
  VAL171 = 171;
  VAL172 = 172;
  VAL173 = 173;
  VAL174 = 174;
  VAL175 = 175;
  VAL176 = 176;
  VAL177 = 177;
  VAL178 = 178;
  VAL179 = 179;
  VAL180 = 180;
  VAL181 = 181;
  VAL182 = 182;
  VAL183 = 183;
  VAL184 = 184;
  VAL185 = 185;
  VAL186 = 186;
  VAL187 = 187;
  VAL188 = 188;
  VAL189 = 189;
  VAL190 = 190;
  VAL191 = 191;
  VAL192 = 192;
  VAL193 = 193;
  VAL194 = 194;
  VAL195 = 195;
  VAL196 = 196;
  VAL197 = 197;
  VAL198 = 198;
  VAL199 = 199;
  VAL200 = 200;
  VAL201 = 201;
  VAL202 = 202;
  VAL203 = 203;
  VAL204 = 204;
  VAL205 = 205;
  VAL206 = 206;
  VAL207 = 207;
  VAL208 = 208;
  VAL209 = 209;
  VAL210 = 210;
  VAL211 = 211;
  VAL212 = 212;
  VAL213 = 213;
  VAL214 = 214;
  VAL215 = 215;
  VAL216 = 216;
  VAL217 = 217;
  VAL218 = 218;
  VAL219 = 219;
  VAL220 = 220;
  VAL221 = 221;
  VAL222 = 222;
  VAL223 = 223;
  VAL224 = 224;
  VAL225 = 225;
  VAL226 = 226;
  VAL227 = 227;
  VAL228 = 228;
  VAL229 = 229;
  VAL230 = 230;
  VAL231 = 231;
  VAL232 = 232;
  VAL233 = 233;
  VAL234 = 234;
  VAL235 = 235;
  VAL236 = 236;
  VAL237 = 237;
  VAL238 = 238;
  VAL239 = 239;
  VAL240 = 240;
  VAL241 = 241;
  VAL242 = 242;
  VAL243 = 243;
  VAL244 = 244;
  VAL245 = 245;
  VAL246 = 246;
  VAL247 = 247;
  VAL248 = 248;
  VAL249 = 249;
  VAL250 = 250;
  VAL251 = 251;
  VAL252 = 252;
  VAL253 = 253;
  VAL254 = 254;
  VAL255 = 255;
}

// We set class according to X.690, 2015, 8.1.2.2.
enum Class {
  Universal = 0;
  Application = 1;
  ContextSpecific = 2;
  Private = 3;
}

// We set encoding according to X.690, 2015, 8.1.2.5.
enum Encoding {
  Primitive = 0;
  Constructed = 1;
}

message Length {
  // If |types| is absent, the encoded length will be correctly encoded
  // according to the DER definite-form (X.690, 2015, 8.1.3-8.1.5 & 10.1).
  oneof types {
    // If |indefinite_form| is set, it causes the length to be encoded using the
    // indefinite-form encoding (X.690, 2015, 8.1.3.6).
    bool indefinite_form = 1;

    // If |length_override| is set, the literal value from |length_override|
    // will be used as the encoded length. This also accounts for 
    // incorrectly-encoded lengths (e.g. non-minimal encodings).
    bytes length_override = 2;
  }
}

message ValueElement {
  optional PDU pdu = 1;
  required bytes val_bits = 2;
}

message Value {
  repeated ValueElement val_array = 1;
}
