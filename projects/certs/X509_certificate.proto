syntax = "proto2";

import "asn1_pdu.proto"; // To use a ASN1 PDU.
import "asn1_types.proto"; // To use a specific ASN1 type.

package X509_certificate;

message X509Certificate {
  required TBSCertificate tbs_certificate = 1;
  required SignatureAlgorithm signature_algorithm = 2;
  required SignatureValue signature_value = 3;
}

message TBSCertificate {
  required asn1_types.Class sequence_class = 2;
  required Version version = 3;
  required CertificateSerialNumber serial_number = 4;
  required Signature signature = 5;
  required Issuer issuer = 6;
  required Validity validity = 7;
  required Subject subject = 9;
  required SubjectPublicKeyInfo subject_public_key_info = 10;
  optional IssuerUniqueId issuer_unique_id = 11;
  required Extensions extensions = 12;
}

message Version {
  optional asn1_pdu.PDU pdu = 1;
  required VersionNumber version_number = 2;
}

enum VersionNumber {
  v1 = 0;
  v2 = 1;
  v3 = 2;
}

message CertificateSerialNumber {
  optional asn1_pdu.PDU pdu = 1;
  required asn1_types.Integer integer = 2;
}

message Signature {
  optional asn1_pdu.PDU pdu = 1;
  required asn1_types.AlgorithmIdentifier algorithm_identifier = 2;
}

message Issuer {
  required Name name = 1;
}

message Name {
  required asn1_pdu.PDU pdu = 1;
  // to-do: make pdu optional and
  // add required name
}

message Validity {
  required asn1_types.Class sequence_class = 1;
  required NotBefore not_before = 2;
  required NotAfter not_after = 3;
}

message NotBefore {
  required Time time = 1;
}

message NotAfter {
  required Time time = 1;
}

message Time {
  optional asn1_pdu.PDU pdu = 1;
  optional asn1_types.UTCTime utc_time = 2;
  required asn1_types.GeneralizedTime generalized_time = 3;
}

message Subject {
  required Name name = 1;
}

message SubjectPublicKeyInfo {
  required asn1_types.Class sequence_class = 1;
  optional asn1_pdu.PDU pdu = 2;
  required asn1_types.AlgorithmIdentifier algorithm_identifier = 3;
  required SubjectPublicKey subject_public_key = 4;
}

message SubjectPublicKey {
  optional asn1_pdu.PDU pdu = 1;
  required asn1_types.BitString bit_string = 2;
}

message IssuerUniqueId {
  required UniqueIdentifier unique_identifier = 1;
}

message UniqueIdentifier {
  optional asn1_pdu.PDU pdu = 1;
  required asn1_types.BitString bit_string = 2;
}

message Extensions {
  required asn1_pdu.PDU pdu = 1;
  // to-do: make invalid_extensions optional and
  // add required valid_extensions
}

message SignatureAlgorithm {
  optional asn1_pdu.PDU pdu = 1;
  required asn1_types.AlgorithmIdentifier algorithm_identifier = 2;
}

message SignatureValue {
  optional asn1_pdu.PDU pdu = 1;
  required asn1_types.BitString bit_string = 2;
}