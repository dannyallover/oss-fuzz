syntax = "proto2";

import "asn1_pdu.proto";
import "asn1_types.proto";

package x509_certificate;

// See RFC 5280, 4.1 & 4.1.1.
message X509Certificate {
  required TBSCertificate tbs_certificate = 1;
  required SignatureAlgorithm signature_algorithm = 2;
  required SignatureValue signature_value = 3;
}

// See RFC 5280, 4.1 & 4.1.2.
message TBSCertificate {
  required Version version = 1;
  required SerialNumber serial_number = 2;
  required Signature signature = 3;
  required Issuer issuer = 4;
  required Validity validity = 5;
  required Subject subject = 6;
  required SubjectPublicKeyInfo subject_public_key_info = 7;
  optional IssuerUniqueId issuer_unique_id = 8;
  optional SubjectUniqueId subject_unique_id = 9;
  optional Extensions extensions = 10;
}

// See RFC 5280, 4.1 & 4.1.2.1.
message Version {
  // If |pdu| is present, encode |Version| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required VersionNumber version_number = 2;
}

// X509 Certificates support three versions (RFC 5280, 4.1 & 4.1.2.1).
enum VersionNumber {
  v1 = 0;
  v2 = 1;
  v3 = 2;
}

// See RFC 5280, 4.1 & 4.1.2.2.
message SerialNumber {
  // If |pdu| is present, encode |SerialNumber| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required asn1_types.Integer integer = 2;
}

// See RFC 5280, 4.1.2.3.
message Signature {
  // If |pdu| is present, encode |Signature| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required AlgorithmIdentifier algorithm_identifier = 2;
}

// See RFC 5280, 4.1 & 4.1.2.4.
message Issuer {
  required Name name = 1;
}

// See RFC 5280, 4.1.2.4.
message Name {
  // If |pdu| is present, encode |Name| as an arbitraty pdu.
  required asn1_pdu.PDU pdu = 1;
  // TODO(dhalawi@gmail.com): make |pdu| optional and
  // add 'required name' to encode a
  // valid |Name| field.
}

// See RFC 5280, 4.1 & 4.1.2.5.
message Validity {
  required NotBefore not_before = 1;
  required NotAfter not_after = 2;
}

// See RFC 5280, 4.1 & 4.1.2.5.
message NotBefore {
  required Time time = 1;
}

// See RFC 5280, 4.1 & 4.1.2.5.
message NotAfter {
  required Time time = 1;
}

// See RFC 5280, 4.1 & 4.1.2.5.
message Time {
  // If |pdu| is present, encode |Time| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  optional asn1_types.UTCTime utc_time = 2;
  required asn1_types.GeneralizedTime generalized_time = 3;
}

// See RFC 5280, 4.1 & 4.1.2.6.
message Subject {
  required Name name = 1;
}

// See RFC 5280, 4.1 & 4.1.2.7.
message SubjectPublicKeyInfo {
  // If |pdu| is present, encode |SubjectPublicKeyInfo| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required AlgorithmIdentifier algorithm_identifier = 2;
  required SubjectPublicKey subject_public_key = 3;
}

// See RFC 5280, 4.1 & 4.1.2.7.
message SubjectPublicKey {
  // If |pdu| is present, encode |SubjectPublicKey| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required asn1_types.BitString bit_string = 2;
}

// See RFC 5280, 4.1 & 4.1.2.8.
message IssuerUniqueId {
  required UniqueIdentifier unique_identifier = 1;
}

// See RFC 5280, 4.1 & 4.1.2.8.
message SubjectUniqueId {
  required UniqueIdentifier unique_identifier = 1;
}

// See RFC 5280, 4.1 & 4.1.2.8.
message UniqueIdentifier {
  // If |pdu| is present, encode |UniqueIdentifier| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required asn1_types.BitString bit_string = 2;
}

// See RFC 5280, 4.1 & 4.1.2.9.
message Extensions {
  // If |pdu| is present, encode |Extensions| as an arbitraty pdu.
  required asn1_pdu.PDU pdu = 1;
  // TODO(dhalawi@gmail.com): make |pdu| optional and
  // add 'required extensions' to encode a
  // valid |Extensions| field.
}

// See RFC 5280, 4.1 & 4.1.1.2.
message SignatureAlgorithm {
  // If |pdu| is present, encode |SignatureAlgorithm| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required AlgorithmIdentifier algorithm_identifier = 2;
}

// See RFC 5280, 4.1 & 4.1.1.3.
message SignatureValue {
  // If |pdu| is present, encode |SignatureValue| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required asn1_types.BitString bit_string = 2;
}

// See RFC 5280, 4.1.1.2.
message AlgorithmIdentifier {
  // TODO(dhalawi@google.com): provide
  // more semantic information
  required string object_identifier = 2;
  optional string parameters = 3;
}