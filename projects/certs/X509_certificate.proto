syntax = "proto2";

import "asn1_pdu.proto"; // To use a ASN1 PDU.
import "asn1_types.proto"; // To use a specific ASN1 type.

package X509_certificate;

// See RFC 5280, 4.1 & 4.1.1.
message X509Certificate {
  // |X509CertificateRFC| is a sequence, so provide a
  // class for the sequence identifier (RFC 5280, 4.1 & 4.1.1).
  required asn1_types.Class sequence_class = 1;
  required TBSCertificate tbs_certificate = 2;
  required SignatureAlgorithm signature_algorithm = 3;
  required SignatureValue signature_value = 4;
}

// See RFC 5280, 4.1 & 4.1.2.
message TBSCertificate {
  // |TBSCertificate| is a sequence, so provide a
  // class for the sequence identifier (RFC 5280, 4.1 & 4.1.2).
  required asn1_types.Class sequence_class = 1;
  required Version version = 2;
  required SerialNumber serial_number = 3;
  required Signature signature = 4;
  required Issuer issuer = 5;
  required Validity validity = 6;
  required Subject subject = 7;
  required SubjectPublicKeyInfo subject_public_key_info = 8;
  optional IssuerUniqueId issuer_unique_id = 9;
  optional SubjectUniqueId subject_unique_id = 10;
  optional Extensions extensions = 11;
}

// See RFC 5280, 4.1 & 4.1.2.1.
message Version {
  optional asn1_pdu.PDU pdu = 1;
  required VersionNumber version_number = 2;
}

// X509 Certificates support three versions (RFC 5280, 4.1 & 4.1.2.1).
enum VersionNumber {
  v1 = 0;
  v2 = 1;
  v3 = 2;
}

// See RFC 5280, 4.1 & 4.1.2.2.
message SerialNumber {
  optional asn1_pdu.PDU pdu = 1;
  required asn1_types.Integer integer = 2;
}

// See RFC 5280, 4.1.2.3.
message Signature {
  optional asn1_pdu.PDU pdu = 1;
  required asn1_types.AlgorithmIdentifier algorithm_identifier = 2;
}

// See RFC 5280, 4.1 & 4.1.2.4.
message Issuer {
  required Name name = 1;
}

// See RFC 5280, 4.1.2.4.
message Name {
  required asn1_pdu.PDU pdu = 1;
  // to-do: make pdu optional and
  // add required name
}

// See RFC 5280, 4.1 & 4.1.2.5.
message Validity {
  // |Validity| is a sequence, so provide a
  // class for the sequence identifier (RFC 5280, 4.1 & 4.1.2.5).
  required asn1_types.Class sequence_class = 1;
  required NotBefore not_before = 2;
  required NotAfter not_after = 3;
}

// See RFC 5280, 4.1 & 4.1.2.5.
message NotBefore {
  required Time time = 1;
}

// See RFC 5280, 4.1 & 4.1.2.5.
message NotAfter {
  required Time time = 1;
}

// See RFC 5280, 4.1 & 4.1.2.5.
message Time {
  optional asn1_pdu.PDU pdu = 1;
  optional asn1_types.UTCTime utc_time = 2;
  required asn1_types.GeneralizedTime generalized_time = 3;
}

// See RFC 5280, 4.1 & 4.1.2.6.
message Subject {
  required Name name = 1;
}

// See RFC 5280, 4.1 & 4.1.2.7.
message SubjectPublicKeyInfo {
  // |SubjectPublicKeyInfo| is a sequence, so provide a
  // class for the sequence identifier (RFC 5280, 4.1 & 4.1.2.7).
  required asn1_types.Class sequence_class = 1;
  optional asn1_pdu.PDU pdu = 2;
  required asn1_types.AlgorithmIdentifier algorithm_identifier = 3;
  required SubjectPublicKey subject_public_key = 4;
}

// See RFC 5280, 4.1 & 4.1.2.7.
message SubjectPublicKey {
  optional asn1_pdu.PDU pdu = 1;
  required asn1_types.BitString bit_string = 2;
}

// See RFC 5280, 4.1 & 4.1.2.8.
message IssuerUniqueId {
  required UniqueIdentifier unique_identifier = 1;
}

// See RFC 5280, 4.1 & 4.1.2.8.
message SubjectUniqueId {
  required UniqueIdentifier unique_identifier = 1;
}

// See RFC 5280, 4.1 & 4.1.2.8.
message UniqueIdentifier {
  optional asn1_pdu.PDU pdu = 1;
  required asn1_types.BitString bit_string = 2;
}

// See RFC 5280, 4.1 & 4.1.2.9.
message Extensions {
  required asn1_pdu.PDU pdu = 1;
  // to-do: make invalid_extensions optional and
  // add required valid_extensions
}

// See RFC 5280, 4.1 & 4.1.1.2.
message SignatureAlgorithm {
  optional asn1_pdu.PDU pdu = 1;
  required asn1_types.AlgorithmIdentifier algorithm_identifier = 2;
}

See RFC 5280, 4.1 & 4.1.1.3.
message SignatureValue {
  optional asn1_pdu.PDU pdu = 1;
  required asn1_types.BitString bit_string = 2;
}